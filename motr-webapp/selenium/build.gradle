import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

group 'uk.gov.dvsa.motr.selenium'

dependencies {
    // Version(s) from AWS SDK BOM.
    compile 'com.amazonaws:aws-java-sdk-dynamodb'

    compile "org.seleniumhq.selenium:selenium-java:${seleniumVersion}"
    compile "org.testng:testng:${orgTestingVersion}"
    compile group: "commons-io', name: 'commons-io', version: '${apacheCommonsIOVersion}'"
    compile("org.uncommons:reportng:${uncommonsReportingVersion}") {
        exclude group: "org.testng", module: "testng"
    }
    compile "com.google.inject:guice:${guiceVersion}"
}

task selenium(type: Test) {

    testLogging {
        events = [TestLogEvent.PASSED,
                  TestLogEvent.SKIPPED,
                  TestLogEvent.FAILED,
                  TestLogEvent.STANDARD_OUT]
        showStandardStreams = true
        exceptionFormat = TestExceptionFormat.FULL
        showExceptions = true
        showStackTraces = true
        showCauses = true

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }

    useTestNG {
        options ->
            options.parallel = 'classes' //modes: methods, tests, classes or instances.
            options.threadCount = 1
            options.useDefaultListeners = true
            options.listeners << 'org.uncommons.reportng.HTMLReporter'
            options.listeners << 'org.uncommons.reportng.JUnitXMLReporter'
            suites('resources/PreSms.xml')
    }

    systemProperties = (Map<String, String>)System.getProperties().findAll {it.key.startsWith("test.")}
}

task selenium_new(type: Test) {

    testLogging {
        events = [TestLogEvent.PASSED,
                  TestLogEvent.SKIPPED,
                  TestLogEvent.FAILED,
                  TestLogEvent.STANDARD_OUT]
        showStandardStreams = true
        exceptionFormat = TestExceptionFormat.FULL
        showExceptions = true
        showStackTraces = true
        showCauses = true

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }

    useTestNG {
        options ->
            options.parallel = 'classes' //modes: methods, tests, classes or instances.
            options.threadCount = 1
            options.useDefaultListeners = true
            options.listeners << 'org.uncommons.reportng.HTMLReporter'
            options.listeners << 'org.uncommons.reportng.JUnitXMLReporter'
            suites('resources/PostSms.xml')
    }

    systemProperties = (Map<String, String>)System.getProperties().findAll {it.key.startsWith("test.")}

    task testReport(type: JavaExec) {
        classpath sourceSets.test.runtimeClasspath
        args project.name
        main = "uk.gov.dvsa.motr.testreports.CreateTestReport"
    }

}
